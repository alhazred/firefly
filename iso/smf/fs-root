#!/sbin/sh

. /lib/svc/share/smf_include.sh
. /lib/svc/share/fs_include.sh


# Make sure that the libraries essential to this stage of booting can be found.
LD_LIBRARY_PATH=/lib; export LD_LIBRARY_PATH

libc_mount() {
	#
	# If there is an optimized libc available in /usr that fits this
	# processor, mount it on top of the base libc.
	#
	LIBC_MOE_32=`/usr/bin/moe -32 '/usr/lib/libc/$HWCAP'`
	if [ -n "$LIBC_MOE_32" ]; then
		/usr/sbin/mount | egrep -s "^/lib/libc.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_32 /lib/libc.so.1
		fi
	fi

	ARCH64=`isainfo | awk '{print $1}'`
	LIBC_MOE_64=`/usr/bin/moe -64 /usr/lib/$ARCH64/libc/'$HWCAP'`
	if [ -n "$LIBC_MOE_64" ]; then
		/usr/sbin/mount | egrep -s "^/lib/$ARCH64/libc.so.1 on "
		if [ $? -ne 0 ]; then
			/usr/sbin/mount -O -F lofs $LIBC_MOE_64 \
				/lib/$ARCH64/libc.so.1
		fi
	fi
}

#
# Update kernel driver.conf cache with any additional driver.conf
# files found on /usr, and device permissions from /etc/minor_perm.
#
/usr/sbin/devfsadm -I -P

libc_mount

# Remount root RW
#
echo "\rRemounting root read/write" > /dev/msglog
	# x86 label
	/sbin/mount -o remount,rw /devices/ramdisk:a /

#
# Workaround for devfs lazy init. The sd nodes are not
# created till you try to access them.
#
echo "Probing for device nodes ..." > /dev/msglog

ls -lR /devices/* > /dev/null

exit $SMF_EXIT_OK
